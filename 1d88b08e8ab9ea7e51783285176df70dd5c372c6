{
  "comments": [
    {
      "key": {
        "uuid": "32206df5_e7936225",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-01-07T11:28:05Z",
      "side": 1,
      "message": "patch",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 17
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef255db_971e490b",
        "filename": "java/com/googlesource/gerrit/plugins/supermanifest/JiriUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-01-07T11:28:05Z",
      "side": 1,
      "message": "This is fragile: for googlesource.com, the canonicalWebUrl is xxx-review.gs.com, but the project is usually referenced as xxx.gs.com\n\nWhy don\u0027t you make the submodule references in the manifest be relative if they\u0027re meant to be host local?",
      "range": {
        "startLine": 108,
        "startChar": 44,
        "endLine": 108,
        "endChar": 59
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54c60cc5_192eb621",
        "filename": "java/com/googlesource/gerrit/plugins/supermanifest/JiriUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1074841
      },
      "writtenOn": "2019-01-07T19:38:15Z",
      "side": 1,
      "message": "RE1: I don\u0027t know canonicalWebUrl for googlesource.com is different from its public hostname. Sorry about that. What is the best practice here to get the public hostnames for gerrit managed repositories here? Can I use @GerritInstanceName? I saw the web UI can reliably retrieve the clone address of each repo using a REST API call. But I don\u0027t quite understand the node.js code and could not reproduce that result in the supermanifest plugin. \n\nRE2: Do you mean we should use relative repo path in Jiri manifest? Well in Jiri, projects (which points to a remote git repo) are not nested according to where they are hosted. A project declaration may be imported by multiple manifest files across different gerrit instances which make it hard to relativize the path. Another option would be drop the relative path in jiri supermanifest plugin completely if the hostname cannot be retrieved reliably. If you mean I should not perform an extra read at line 115, I can fix that in next patch.",
      "parentUuid": "4ef255db_971e490b",
      "range": {
        "startLine": 108,
        "startChar": 44,
        "endLine": 108,
        "endChar": 59
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20e8e77f_6e72ea18",
        "filename": "java/com/googlesource/gerrit/plugins/supermanifest/JiriUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-01-08T10:35:18Z",
      "side": 1,
      "message": "RE1: To get at the clone URLs, have a look at how GetServerInfo uses DownloadScheme.\n\nRE2: repo manifests are relative so partners in the android ecosystem make a local fork of the project, by simply mirroring a gerrit instance, and then changing the relevant subprojects. It seems you are saying that the projects that use JIRI do not want to have an ecosystem with partner without jumping through extra hoops.\n\nI don\u0027t completely understand what you want to do, but we won\u0027t be supporting getting repos from other hosts in a gerrit plugin.",
      "parentUuid": "54c60cc5_192eb621",
      "range": {
        "startLine": 108,
        "startChar": 44,
        "endLine": 108,
        "endChar": 59
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "347c4589_fc691f47",
        "filename": "java/com/googlesource/gerrit/plugins/supermanifest/JiriUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1074841
      },
      "writtenOn": "2019-01-08T18:36:06Z",
      "side": 1,
      "message": "There is an internal gerrit that is not currently open to public and several jiri manifests in the internal gerrit instance contains projects declaration that points to the public git repos. Everything works fine until we have a git repo in internal gerrit whose name is exactly the same as a public git repo and this plugin fails because it determines if the submodule should be relativized by opening a local project with the same name to see if it exists. I just want to change this behavior to relativizing the submodules only if they share the same public hostname. It\u0027s not related getting repos from other hosts in a gerrit plugin. We just need to know current gerrit instance\u0027s public hostname. I am not the guy who design jiri and superproject plugin. I just come to fix the bug. Please don\u0027t blame me on their design issues.",
      "parentUuid": "20e8e77f_6e72ea18",
      "range": {
        "startLine": 108,
        "startChar": 44,
        "endLine": 108,
        "endChar": 59
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d06c017_02b66078",
        "filename": "java/com/googlesource/gerrit/plugins/supermanifest/JiriUpdater.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-01-08T18:55:47Z",
      "side": 1,
      "message": "Thanks for the more detailed explanation. \n\nI regret having allowed the Jiri extension in the past, but you\u0027re right I shouldn\u0027t take it out on you. Sorry for that.\n\nSo, my tip is to get \n\n  PluginMapContext\u003cDownloadScheme\u003e \n\ninjected. Then you can iterate over them, and do\n\n   scheme.getUrl(proj.getName())\n\nthis should give you a set of Strings holding URLs, that differ by their scheme (HTTP, ssh). You could extract the hostname from that URL, and use that to match against the submodule\u0027s host name.",
      "parentUuid": "347c4589_fc691f47",
      "range": {
        "startLine": 108,
        "startChar": 44,
        "endLine": 108,
        "endChar": 59
      },
      "revId": "1d88b08e8ab9ea7e51783285176df70dd5c372c6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}